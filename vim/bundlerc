" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

" Web Developer
Plugin 'kchmck/vim-coffee-script'
    autocmd FileType coffee setl ts=2 sw=2 sts=2
Plugin 'AndrewRadev/vim-eco'
Plugin 'tpope/vim-haml'
Plugin 'othree/html5.vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'groenewege/vim-less'
Plugin 'mattn/emmet-vim'
Plugin 'mklabs/grunt.vim'

" PHP
Plugin 'StanAngeloff/php.vim'
Plugin 'voronkovich/php-getter-setter.vim'
Plugin 'andersoncustodio/vim-fix-php-html-indent'
Plugin '2072/PHP-Indenting-for-VIm'
    let g:PHP_vintage_case_default_indent = 1
Plugin 'shawncplus/phpcomplete.vim'
Plugin 'evidens/vim-twig'
Plugin 'xsbeats/vim-blade'

" Ruby
Plugin 'vim-ruby/vim-ruby'
    autocmd FileType ruby setl ts=2 sw=2 sts=2
    autocmd FileType yaml setl ts=2 sw=2 sts=2
    autocmd FileType scss setl ts=2 sw=2 sts=2
Plugin 'tpope/vim-rails'
Plugin 'hallison/vim-ruby-sinatra'
Plugin 'slim-template/slim-rails'
Plugin 'nelstrom/vim-textobj-rubyblock'
Plugin 'bootleq/vim-textobj-rubysymbol'
Plugin 'tpope/vim-rvm'

" Go
Plugin 'jnwhiteh/vim-golang'

" Python
Plugin 'pancurster/vim_web2py_syntax'

" Javascript
Plugin 'pangloss/vim-javascript'
Plugin 'itspriddle/vim-jquery'
Plugin 'briancollins/vim-jst'
Plugin 'claco/jasmine.vim'
Plugin 'thinca/vim-textobj-function-javascript'

" Session
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
    let g:session_directory = '~/.vim-tmp/session'
    let g:session_autoload = 'no'
    let g:session_autosave = 'yes'

" Shell
Plugin 'xolox/vim-shell'
    let g:shell_fullscreen_items = 'm'
    map <Leader>fs :Fullscreen<CR>
    map <Leader>op :Open<CR>
    map <Leader>sh :VimShell<CR>
Plugin 'xolox/vim-easytags'

" UltiSnips
Plugin 'SirVer/ultisnips'
    let g:UltiSnipsExpandTrigger = '<C-j>'
    let g:UltiSnipsSnippetDirectories = ['bundle/vim-snippets']
    autocmd FileType ruby call UltiSnips#AddFiletypes('.ruby-rails.html.javascript')
    autocmd FileType eruby call UltiSnips#AddFiletypes('.eruby-rails.html.javascript')
Plugin 'andersoncustodio/vim-snippets'

" Format Suporte
Plugin 'juvenn/mustache.vim'
Plugin 'timcharper/textile.vim'
Plugin 'leshill/vim-json'
Plugin 'digitaltoad/vim-pug'
    autocmd FileType jade setl ts=2 sw=2 sts=2
Plugin 'tpope/vim-markdown'
Plugin 'LaTeX-Box-Team/LaTeX-Box'

" Ctrlp
Plugin 'ctrlpvim/ctrlp.vim'
    let g:ctrlp_cmd = 'CtrlPBuffer'
    let g:ctrlp_working_path_mode = 0
    let g:ctrlp_cache_dir = '~/.vim-tmp/ctrlp'
    let g:ctrlp_clear_cache_on_exit = 0
    let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn\|vendor\|node_modules$',
    \ 'file': '\.exe$\|\.so$\|\.dll$',
    \ 'link': 'some_bad_symbolic_links',
    \ }
    map <silent>,<C-p> :CtrlPClearCache<CR>:CtrlP<CR>
Plugin 'ivalkeen/vim-ctrlp-tjump'
    nnoremap <c-]> :CtrlPtjump<cr>
    vnoremap <c-]> :CtrlPtjumpVisual<cr>

" Lusty
Plugin 'sjbach/lusty'

" Gundo
Plugin 'sjl/gundo.vim'
    nnoremap <F4> :GundoToggle<CR>
    let g:gundo_right = 1

" Nerdtree settings
Plugin 'scrooloose/nerdtree'
    let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
    let g:NERDTreeMouseMode = 2
    let g:NERDTreeWinSize = 40
    let g:NERDTreeWinPos = 'left'
    let g:nerdtree_tabs_open_on_gui_startup = 0
    nmap <silent> <f2> :NERDTreeToggle<CR>

" A like Power Line
Plugin 'vim-airline/vim-airline'
let g:airline_powerline_fonts = 1

" Easymotion
Plugin 'Lokaltog/vim-easymotion'
    let g:EasyMotion_leader_key = '<space>'
Plugin 'wavded/vim-stylus'

" Colors
Plugin 'PickAColor.vim'
    map <silent>\rg :PickRGB<CR>
    map <silent>\he :PickHEX<CR>
    map <silent>\hs :PickHSL<CR>
    map <silent>\ha :PickRAW<CR>
Plugin 'ap/vim-css-color'

" Git
Plugin 'mattn/gist-vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-unimpaired'

" delimitMate
Plugin 'Raimondi/delimitMate'
    let delimitMate_matchpairs = '(:),[:],{:}'

Plugin 'perrywky/vim-matchit'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'tpope/vim-ragtag'

" Align
Plugin 'jezcope/vim-align'
    nmap \a :Align
    vmap \a :Align

Plugin 'andersoncustodio/vim-enter-indent'
Plugin 'greyblake/vim-preview'
Plugin 'akhil/scala-vim-bundle'
Plugin 'vim-scripts/grep.vim'
Plugin 'tpope/vim-abolish'
Plugin 'vim-scripts/bufexplorer.zip'

" Syntastic settings
Plugin 'scrooloose/syntastic'
    let g:syntastic_enable_signs = 1
    let g:syntastic_auto_loc_list = 2
    let g:syntastic_auto_jump = 0
    let g:syntastic_mode_map = { 'mode': 'passive' }

Plugin 'andersoncustodio/vim-cmdline-completion'

" Indent guides
Plugin 'nathanaelkane/vim-indent-guides'
    let g:indent_guides_start_level = 1
    let g:indent_guides_guide_size = 1

" tag bar
Plugin 'majutsushi/tagbar'
    nmap <silent> <f3> :TagbarToggle<CR>

" YankRing
Plugin 'vim-scripts/YankRing.vim'
    let g:yankring_history_dir = expand('~/.vim-tmp/')
    let g:yankring_replace_n_pkey = ',p'
    let g:yankring_replace_n_nkey = ',P'

" neocomplcache
" A beter autocomplete system!
Plugin 'Shougo/neocomplcache.git'
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_camel_case_completion = 1
    let g:neocomplcache_enable_underbar_completion = 1
    let g:neocomplcache_enable_smart_case = 1

    " default # of completions is 100, that's crazy
    let g:neocomplcache_max_list = 5

    " words less than 3 letters long aren't worth completing
    let g:neocomplcache_auto_completion_start_length = 3

    " Map standard Ctrl-N completion to Cmd-Space
    inoremap <D-Space> <C-n>

    " This makes sure we use neocomplcache completefunc instead of
    " the one in rails.vim, otherwise this plugin will crap out
    let g:neocomplcache_force_overwrite_completefunc = 1

    " Define keyword.
    if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
    " Enable heavy omni completion.
    if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
    endif
    let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'

    " Prevent hanging with python: https://github.com/skwp/dotfiles/issues/163
    let g:neocomplcache_omni_patterns['python'] = ''

Plugin 'mileszs/ack.vim'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-endwise'
Plugin 'thinca/vim-visualstar'
Plugin 'vim-scripts/VisIncr'
Plugin 'tpope/vim-cucumber'
Plugin 'andersoncustodio/vim-tmux'
Plugin 'msanders/cocoa.vim'
Plugin 'chrisbra/SudoEdit.vim'
Plugin 'austintaylor/vim-indentobject'
Plugin 'sjl/clam.vim'
Plugin 'andersoncustodio/vim-emacscommandline'
Plugin 'vim-scripts/ZoomWin'
Plugin 'chrisbra/NrrwRgn'
Plugin 'TrimBlank'

Plugin 'terryma/vim-multiple-cursors'

Plugin 'writebackup'
    let g:WriteBackup_BackupDir = '~/.vim-tmp/backup'
Plugin 'writebackupVersionControl'

" Others
Plugin 'ervandew/supertab'
Plugin 'DataWraith/auto_mkdir'
Plugin 'tpope/vim-surround'
Plugin 'ciaranm/securemodelines'
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-tbone'
Plugin 'ShowTrailingWhitespace'
Plugin 'evanmiller/nginx-vim-syntax'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'joonty/vdebug'
Plugin 'Rename'
Plugin 'vim-scripts/IndexedSearch'

" Others text objects
Plugin 'coderifous/textobj-word-column.vim'
Plugin 'kana/vim-textobj-datetime'
Plugin 'kana/vim-textobj-entire'
Plugin 'kana/vim-textobj-function'
Plugin 'kana/vim-textobj-user'
Plugin 'lucapette/vim-textobj-underscore'
Plugin 'vim-scripts/argtextobj.vim'

" vim:ft=vim

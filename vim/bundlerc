" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

" Web Developer
Bundle 'kchmck/vim-coffee-script'
    autocmd FileType coffee setl ts=2 sw=2 sts=2
Bundle 'AndrewRadev/vim-eco'
Bundle 'tpope/vim-haml'
Bundle 'othree/html5.vim'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'groenewege/vim-less'
Bundle 'mattn/emmet-vim'

" PHP
Bundle 'voronkovich/php-getter-setter.vim'
Bundle 'andersoncustodio/vim-fix-php-html-indent'
Bundle '2072/PHP-Indenting-for-VIm'
    let g:PHP_vintage_case_default_indent = 1
Bundle 'shawncplus/phpcomplete.vim'
Bundle 'evidens/vim-twig'
Bundle 'xsbeats/vim-blade'

" Ruby
Bundle 'vim-ruby/vim-ruby'
    autocmd FileType ruby setl ts=2 sw=2 sts=2
Bundle 'tpope/vim-rails'
Bundle 'hallison/vim-ruby-sinatra'
Bundle 'slim-template/slim-rails'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle "bootleq/vim-textobj-rubysymbol"
Bundle 'tpope/vim-rvm'

" Go
Bundle 'jnwhiteh/vim-golang'

" Python
Bundle 'pancurster/vim_web2py_syntax'

" Javascript
Bundle 'pangloss/vim-javascript'
Bundle 'itspriddle/vim-jquery'
Bundle 'briancollins/vim-jst'
Bundle 'claco/jasmine.vim'
Bundle "thinca/vim-textobj-function-javascript"

" Session
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-session'
    let g:session_directory = '~/.vim-tmp/session'
    let g:session_autoload = 'no'
    let g:session_autosave = 'yes'

" Shell
Bundle 'xolox/vim-shell'
    let g:shell_fullscreen_items = 'm'
    map <Leader>fs :Fullscreen<CR>
    map <Leader>op :Open<CR>
    map <Leader>sh :VimShell<CR>
Bundle 'xolox/vim-easytags'

" UltiSnips
Bundle 'SirVer/ultisnips'
    let g:UltiSnipsExpandTrigger = '<C-j>'
    let g:UltiSnipsSnippetDirectories = ['bundle/vim-snippets']
    autocmd FileType ruby call UltiSnips#AddFiletypes('.ruby-rails.html.javascript')
    autocmd FileType eruby call UltiSnips#AddFiletypes('.eruby-rails.html.javascript')
Bundle 'andersoncustodio/vim-snippets'

" Format Suporte
Bundle 'juvenn/mustache.vim'
Bundle 'timcharper/textile.vim'
Bundle 'leshill/vim-json'
Bundle 'statianzo/vim-jade'
Bundle 'tpope/vim-markdown'
Bundle 'LaTeX-Box-Team/LaTeX-Box'

" Ctrlp
Bundle 'kien/ctrlp.vim'
    let g:ctrlp_cmd = 'CtrlPBuffer'
    let g:ctrlp_working_path_mode = 0
    let g:ctrlp_cache_dir = '~/.vim-tmp/ctrlp'
    let g:ctrlp_clear_cache_on_exit = 0
    let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn\|vendor$',
    \ 'file': '\.exe$\|\.so$\|\.dll$',
    \ 'link': 'some_bad_symbolic_links',
    \ }
    map <silent>,<C-p> :CtrlPClearCache<CR>:CtrlP<CR>
Bundle 'LustyJuggler'
Bundle 'LustyExplorer'

" Gundo
Bundle 'sjl/gundo.vim'
    nnoremap <F4> :GundoToggle<CR>
    let g:gundo_right = 1

" Nerdtree settings
Bundle 'scrooloose/nerdtree'
    let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
    let g:NERDTreeMouseMode = 2
    let g:NERDTreeWinSize = 40
    let g:NERDTreeWinPos = 'Right'
    let g:nerdtree_tabs_open_on_gui_startup = 0
    nmap <silent> <f2> :NERDTreeToggle<CR>

" Power Line
Bundle 'skwp/vim-powerline'
    let g:Powerline_symbols = 'fancy'

" Easymotion
Bundle 'Lokaltog/vim-easymotion'
    let g:EasyMotion_leader_key = '<space>'
Bundle 'wavded/vim-stylus'

" Colors
Bundle 'PickAColor.vim'
    map <silent>\rg :PickRGB<CR>
    map <silent>\he :PickHEX<CR>
    map <silent>\hs :PickHSL<CR>
    map <silent>\ha :PickRAW<CR>
Bundle 'ap/vim-css-color'

" Git
Bundle 'mattn/gist-vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-unimpaired'

" delimitMate
Bundle 'Raimondi/delimitMate'
    let delimitMate_matchpairs = '(:),[:],{:}'

Bundle 'perrywky/vim-matchit'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'tpope/vim-ragtag'

" Align
Bundle 'jezcope/vim-align'
    nmap \a :Align
    vmap \a :Align

Bundle 'andersoncustodio/vim-enter-indent'
Bundle 'greyblake/vim-preview'
Bundle 'akhil/scala-vim-bundle'
Bundle 'vim-scripts/grep.vim'
Bundle 'tpope/vim-abolish'
Bundle 'vim-scripts/bufexplorer.zip'

" Syntastic settings
Bundle 'scrooloose/syntastic'
    let g:syntastic_enable_signs = 1
    let g:syntastic_auto_loc_list = 2
    let g:syntastic_auto_jump = 0
Bundle 'andersoncustodio/vim-cmdline-completion'

" Indent guides
Bundle 'nathanaelkane/vim-indent-guides'
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1

" tag bar
Bundle 'majutsushi/tagbar'
    nmap <silent> <f3> :TagbarToggle<CR>

" YankRing
Bundle 'vim-scripts/YankRing.vim'
    let g:yankring_history_dir = expand('~/.vim-tmp/')
    let g:yankring_replace_n_pkey = ',p'
    let g:yankring_replace_n_nkey = ',P'

" neocomplcache
" A beter autocomplete system!
Bundle "Shougo/neocomplcache.git"
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_camel_case_completion = 1
    let g:neocomplcache_enable_underbar_completion = 1
    let g:neocomplcache_enable_smart_case = 1

    " default # of completions is 100, that's crazy
    let g:neocomplcache_max_list = 5

    " words less than 3 letters long aren't worth completing
    let g:neocomplcache_auto_completion_start_length = 3

    " Map standard Ctrl-N completion to Cmd-Space
    inoremap <D-Space> <C-n>

    " This makes sure we use neocomplcache completefunc instead of
    " the one in rails.vim, otherwise this plugin will crap out
    let g:neocomplcache_force_overwrite_completefunc = 1

    " Define keyword.
    if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
    " Enable heavy omni completion.
    if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
    endif
    let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'

    " Prevent hanging with python: https://github.com/skwp/dotfiles/issues/163
    let g:neocomplcache_omni_patterns['python'] = ''

Bundle 'mileszs/ack.vim'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-bundler'
Bundle 'thinca/vim-visualstar'
Bundle 'vim-scripts/VisIncr'
Bundle 'tpope/vim-cucumber'
Bundle 'andersoncustodio/vim-tmux'
Bundle 'msanders/cocoa.vim'
Bundle 'chrisbra/SudoEdit.vim'
" Bundle 'vimez/vim-showmarks'
Bundle 'austintaylor/vim-indentobject'
Bundle 'sjl/clam.vim'
Bundle 'andersoncustodio/vim-emacscommandline'
Bundle 'vim-scripts/ZoomWin'
Bundle 'chrisbra/NrrwRgn'
Bundle 'TrimBlank'

Bundle 'terryma/vim-multiple-cursors'

Bundle 'writebackup'
    let g:WriteBackup_BackupDir = '~/.vim-tmp/backup'
Bundle 'writebackupVersionControl'

" Others
Bundle 'ervandew/supertab'
Bundle 'DataWraith/auto_mkdir'
Bundle 'tpope/vim-surround'
Bundle 'ciaranm/securemodelines'
Bundle 'tomtom/tcomment_vim'
Bundle 'tpope/vim-tbone'
Bundle 'ShowTrailingWhitespace'
Bundle 'evanmiller/nginx-vim-syntax'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'joonty/vdebug'
Bundle 'Rename'
Bundle 'vim-scripts/IndexedSearch'

" Others text objects
Bundle "coderifous/textobj-word-column.vim"
Bundle "kana/vim-textobj-datetime"
Bundle "kana/vim-textobj-entire"
Bundle "kana/vim-textobj-function"
Bundle "kana/vim-textobj-user"
Bundle "lucapette/vim-textobj-underscore"
Bundle "vim-scripts/argtextobj.vim"

" vim:ft=vim
